# Data Manager Specification

## Purpose

The Data Manager encapsulates all logic for downloading, transforming, storing, and accessing market data. It serves as the central hub for data operations across the trading system.

## Architecture

The Data Manager is a meta-component that coordinates three specialized sub-components:

### 1. Data Downloader

**Responsibility:** Retrieve financial market data from external sources and manage local persistence.

**Requirements:**
- Implement support for multiple data sources via modular downloaders:
  - `BinanceDataDownloader` - for cryptocurrency market data
  - `YahooFinanceDataDownloader` - for traditional financial instruments
- Accept configuration parameters:
  - `symbols` (list): Asset identifiers to download
  - `start_date`: Beginning of data range
  - `end_date`: End of data range
  - `interval`: Data frequency (e.g., '1h', '4h', '1d')
- Return data as pandas DataFrames
- Persist all downloaded data to a local SQLite database
- Implement intelligent caching:
  - Check SQLite database before downloading
  - Retrieve existing data from local storage when available
  - Download only missing data gaps to minimize API calls
  - This caching strategy supports both backtesting and live trading

### 2. Instrument Generator

**Responsibility:** Create synthetic instruments from existing market data.

**Requirements:**
- Accept one or more instrument generator implementations
- Each generator defines a calculation that combines one or more existing instruments
- Examples:
  - Spread: `BTC - ETH`
  - Ratio: `BTC / ETH`
  - Custom combinations: `0.5 * BTC + 0.3 * ETH - 0.2 * SOL`
- Assign a unique symbol to each generated instrument
- Add generated instrument data to the Data Manager's available dataset
- Generated instruments should be accessible identically to raw market data

### 3. Feature Calculator

**Responsibility:** Compute technical indicators and derived features from market data.

**Requirements:**
- Accept one or more feature calculator implementations
- Each calculator defines a specific technical computation
- Common examples:
  - Moving averages (SMA, EMA)
  - Bollinger Bands
  - Relative Strength Index (RSI)
  - MACD (Moving Average Convergence Divergence)
- Calculators operate on specific symbols but have access to all Data Manager data for cross-instrument calculations
- Add computed features as additional columns to the underlying market data
- Features should be automatically recalculated when new data is added

## Design Principles

- **Single Responsibility:** Each component handles one aspect of data management
- **Extensibility:** New downloaders, generators, and calculators can be added without modifying existing code
- **Efficient Caching:** Minimize redundant downloads and calculations
- **Consistent Interface:** All data (raw, generated, or calculated) is accessed through uniform methods
- **Clean Separation:** Data acquisition, transformation, and access logic are clearly separated